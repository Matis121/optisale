<% content_for :title, "Produkty" %>
<%= render Ui::Layout::Container::DefaultComponent.new do %>
  <%= render Ui::Storage::Settings::TabsComponent.new %>
  <!-- Compact Filters & Actions -->
  <div class="bg-base-200 rounded-lg border border-base-200 p-3 my-8">
    <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3">
      <!-- Quick filters -->
      <div class="flex flex-wrap items-center gap-3">
        <!-- Katalog (tylko jeśli więcej niż jeden) -->
        <% if current_user.catalogs.count > 1 %>
          <%= form_with url: update_current_catalog_in_session_storage_products_path, method: :post, class: "form-control" do |f| %>
            <%= f.label :catalog_id, "Katalog", class: "label" %>
            <%= f.select :catalog_id, options_from_collection_for_select(current_user.catalogs, :id, :name, @current_catalog.id), {}, { class: "input", onchange: 'this.form.submit()' } %>
          <% end %>
        <% end %>
        <!-- Magazyn (tylko jeśli więcej niż jeden) -->
        <% if @current_catalog.warehouses.count > 1 %>
          <%= form_with url: update_current_warehouse_in_session_storage_products_path, method: :post, class: "form-control" do |f| %>
            <%= f.label :warehouse_id, "Magazyn", class: "label" %>
            <% options = @current_catalog.warehouses.map { |w| [w.name, w.id] } %>
            <% options.unshift(['Wszystkie stany', 'all']) %>
            <%= f.select :warehouse_id, options_for_select(options, @current_warehouse&.id || 'all'), {}, { class: "input", onchange: 'this.form.submit()' } %>
          <% end %>
        <% end %>
        <!-- Grupa cenowa (tylko jeśli więcej niż jeden) -->
        <% if @current_catalog.price_groups.count > 1 %>
          <%= form_with url: update_current_price_group_in_session_storage_products_path, method: :post, class: "form-control" do |f| %>
            <%= f.label :price_group_id, "Grupa cenowa", class: "label" %>
            <%= f.select :price_group_id, options_from_collection_for_select(@current_catalog.price_groups, :id, :name, @current_price_group.id), {}, { class: "input", onchange: 'this.form.submit()' } %>
          <% end %>
        <% end %>
        <!-- Advanced filters toggle -->
      </div>
      <!-- Actions -->
      <div class="flex items-center gap-2">
        <button class="btn btn-ghost btn-xs gap-2" onclick="toggleFilters()">
          <i class="fas fa-filter text-base-content text-xs"></i>
          Filtry
          <i class="fas fa-chevron-down text-xs transition-transform" id="filter-icon"></i>
        </button>
        <%= link_to new_storage_product_path, class: "btn btn-primary btn-sm gap-2", data: { turbo_frame: "modal-frame" } do %>
          <i class="fas fa-plus"></i>
          Nowy produkt
        <% end %>
      </div>
    </div>
    <!-- Filters -->
    <div class="hidden mt-3 pt-3 border-t border-base-300" id="filters-section">
      <%= form_for_filterrific @filterrific, url: storage_products_path, method: :get do |f| %>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-3" id="filter-inputs">
          <%= f.text_field :with_name, placeholder: "Nazwa produktu...", class: "input input-sm" %>
          <%= f.text_field :with_sku, placeholder: "SKU...", class: "input input-sm" %>
          <%= f.text_field :with_ean, placeholder: "EAN...", class: "input input-sm" %>
          <%= f.number_field :with_tax_rate, placeholder: "Stawka VAT", step: 0.01, class: "input input-sm" %>
        </div>
        <div class="flex justify-end gap-2">
          <%= link_to "Wyczyść", reset_filterrific_url, class: "btn btn-outline btn-sm"%>
          <%= f.submit "Filtruj", name: nil, class: "btn btn-primary btn-sm" %>
        </div>
      <% end %>
    </div>
  </div>
  <!-- Content -->
  <div id="products" class="min-w-full">
    <%= turbo_frame_tag "products_frame" do %>
      <%= render partial: "storage/products/table", locals: { products: @products } %>
    <% end %>
  </div>
<% end %>
<script>
  document.addEventListener('turbo:load', function() {
    const filterInputs = document.getElementById('filter-inputs');
    const filterInputsArray = filterInputs.querySelectorAll('input');
    filterInputsArray.forEach(element => {
      if (element.value !== '') {
        document.getElementById('filters-section').classList.remove('hidden');
        document.getElementById('filter-icon').style.transform = 'rotate(180deg)';
        return;
      }
    });
  });

  function toggleFilters() {
    const filtersSection = document.getElementById('filters-section');
    const filterIcon = document.getElementById('filter-icon');

    if (filtersSection.classList.contains('hidden')) {
      filtersSection.classList.remove('hidden');
      filterIcon.style.transform = 'rotate(180deg)';
    } else {
      filtersSection.classList.add('hidden');
      filterIcon.style.transform = 'rotate(0deg)';
    }
  }
</script>